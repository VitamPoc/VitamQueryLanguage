les champs __XXX ne seront pas stockes dans le resultat arborescent

Valeurs fixes: valeur
=====================
	valeurSimple = "chaine" | nombre
		ou "chaine" = une chaine de caractere fixe
		ou nombre = un nombre fixe
		
	valeur = valeurSimple | listeValeurs
		ou listeValeurs = [ valeurSimple, ... ]

L'expression des champs: champs
===============================
	champ = "nomDuChamp" : valeur | typeSimple | typeComplexe
		=> associe a un nom de champ (chaine) une valeur ou un type simple ou un type complexe
	
	champs = champ | champ, champs
		La notation "champ, champ, ..." signifie serie de champs (exemple : { champ1 : val1, champ2 : val2, champ3 : val3 } )

L'expression des occurences d'un niveau de MetaAip (variabilisation) : occurence
================================================================================
	occurence_unique = "__occur" : nombre (> 0)
		=> signifie qu'il y aura 'nombre' fils pour un noeud pere donne et le compteur vaudra entre 0 et nombre.

	occurence_partage = "__occur" : nombre (>0) , "__idcpt" : "nomDuCompteur"
		=> signifie qu'il y aura 'nombre' fils pour un noeud pere donne MAIS le compteur sera global (unique et partage par son nom dans le champ __idcpt) et variera de 0 a l'infini (par lots de 'nombre')

	occurence_bound = "__occur" : valeur, "__high" : valeur, "__idcpt" : "nomDuCompteur"
		=> variera entre low (valeur) et high (inclus)

    Options complémentaires:
    "__distrib" : base => indique le compteur utilisé par la répartition avec pour valeur de base (low) = base
    "__notempty" : 1 => indique que si un objet créé est vide, il ne sera pas conservé (vide si pas de fils ou si getObject = null)
    
	Dans tous les cas, le compteur produit devient le compteur de reference pour les MetaAip crees ensuite pour ce niveau (et uniquement celui-la).

	occurence = occurence_unique | occurence_partage

Types simples: typeSimple
=========================
	{ "__type" : "chaine", "__subprefix" : [ "nomValeur", ... ], "__save" : "nomValeur" } : une chaine de caracteres
		=> une chaine aleatoire sera produite

	{ "__type" : "date", "__save" : "nomValeur" } : une date
		=> une date aleatoire sera produite

	{ "__type" : "nombre", "__save" : "nomValeur" } : un format numerique (avec ou sans virgule)
		=> un nombre aleatoire sera produite
	
	{ "__type" : "save", "__subprefix" : [ "nomValeur", ... ], "__save" : "nomValeur" } : une chaine de caracteres
		=> une chaine est produite par la concatenation des prefix

Types complexes: typeComplexe
=============================
	{ "__type" : "interval", "__low" : valeur, "__high" : valeur, "__subprefix" : [ "nomValeur", ... ], "__save" : "nomValeur" }
		=> prend une valeur aléatoire entre low et high (inclus)

	{ "__type" : "liste", "__liste" : listeValeurs, "__subprefix" : [ "nomValeur", ... ], "__save" : "nomValeur" }
		=> de maniere aleatoire, un element de la liste sera attribue au champ

	{ "__type" : "listeorder", "__listeorder" : listeValeurs, "__subprefix" : [ "nomValeur", ... ], "__save" : "nomValeur" }
		=> le premier objet du pere commun aura pour valeur la valeur de rang 1, le deuxieme la valeur de rang 2, etc. 
		Si le nombre de fils du pere depasse le nombre de valeurs dans la liste, la derniere valeur est re-utilisee.
		Exemple : { champ : { "__type" : "listeorder", "__listeorder" : [ "A", "B" ] } } avec 5 fils de ce type (occurence._occur = 3)
		=> premier fils : { champ : "A" }
		=> deuxieme fils : { champ : "B" }
		=> troisieme fils : { champ : "B" }

	{ "__type" : "serie", "__serie" : { "__prefix" : chaine, "__idcpt" : "nomDuCompteur", "__modulo" : nombre}, "__subprefix" : [ "nomValeur", ... ], "__save" : "nomValeur" }
		=> une chaine aleatoire sera produite du type : "prefixe"+Valeur" ou Valeur sera
		__idcpt est precise : la valeur courante du compteur specifie est utilisee
		__idcpt non precise : la valeur courante du compteur de reference est utilisee
		__modulo est precise : la valeur est calcule par nombre = (nombre % modulo)+1
		__modulo n'est pas precise : la valeur est non modifiee
		Exemple : { champ : { "__type" : "serie", "__serie" : { "__prefix" : "Pref_", "__idcpt" : "moncpt", "__modulo" : 3 } } } avec __occur = 4 et moncpt = 10 au depart
		=> premier fils : moncpt = 11 => (11 mod 3) +1 = 3 => { champ : "Pref_3" }
		=> deuxieme fils : moncpt = 12 => (12 mod 3) +1 = 1 => { champ : "Pref_1" }
		=> troisieme fils : moncpt = 13 => (13 mod 3) +1 = 2 => { champ : "Pref_2" }
		=> quatrieme fils : moncpt = 14 => (14 mod 3) +1 = 3 => { champ : "Pref_3" }

	{ "__type" : "subfield" , "__subfield" : { champs } }
		=> un champ compose sera cree (potentiellement complexe)
		Exemple : { "champ1" : { "__type" : "subfield" , "__subfield" : { "champ2" : "valeur" } } }
		=> champ1.champ2 = "valeur" => { champ1 : { champ2 : "valeur" } }

	{ "__type" : "select", "__select" : [ {"__field" : "name", "__value": ["nomValeur"]}, ... ] }
	
Mots Clefs de structures: domaine
=================================
	domaine = { "Domaine" : "chaine1", "__model": "chaine2", metaaip, extraStaticField }
		=> definie que ce modele chaine2 appartient a la racine Domaine ayant pour nom "chaine1"
		=> definie la sous-structure metaaip (unique) a utiliser
		=> pas de champ
	
	metaaip = "MetaAip" : [ { occurence }, { champs }, sous-structure ]
		=> definie un niveau de MetaAip avec ses champs et sa sous-structure (unique)
		
	dataobject = { "DataObject" : { champs } }
		=> definie un DataObject avec ses champs mais il n'aura pas de sous-structure (pour le POC)
		=> ses champs devront avoir deux categories : ceux propres au modele, et ceux communs et fixes (exemple : format, empreinte, ...)
	
	sous-structure = { metaaip } | dataobject

	
Exemple de definition d'un modele: 
==================================
{ "Domaine" : "domainName", "__model" : "modelName",
	"MetaAip" : [
		{ "__occur" : 100}, 
		{ "champ1" : "chaine", "champ2" : { "__type" : "liste", "__liste" : [ "val1", "val2" ] } },
		{ "MetaAip" : [
			{ "__occur" : 1000, "__idcpt" : "moncpt" },
			{ "champ3" : { "__type" : "serie", "__serie" : { "__prefix" : "Pref_", "__idcpt" : "moncpt" } } },
			{ "MetaAip" : [
				{ "__occur" : 10 },
				{ "champ4" : { "__type" : "listeorder", "__listeorder" : [ "val3", "val4" ] },
				  "champ5" : { "__type" : "serie", "__serie" : { "__prefix" : "do_" } } },
				{ "DataObject" : { "champ6" : "chaine" } }
				]
			} ]
		} ]
}

=>
{ Domaine : "chaine",
	MetaAip : [	
		{ champ1 : "valeur", champ2 : "val2",
		MetaAip : [
			{ champ3 : "Pref_1", 
			MetaAip : [
				{ champ4 : "val3", champ5 : "do_1", DataObject : { champ6 : "val6" } },
				{ champ4 : "val4", champ5 : "do_2", DataObject : { champ6 : "val6" } },
				{ champ4 : "val4", champ5 : "do_3", DataObject : { champ6 : "val6" } },
				...
				{ champ4 : "val4", champ5 : "do_10", DataObject : { champ6 : "val6" } },
			] },
			{ champ3 : "Pref_2", 
			MetaAip : [
				{ champ4 : "val3", champ5 : "do_1", DataObject : { champ6 : "val6" } },
				{ champ4 : "val4", champ5 : "do_2", DataObject : { champ6 : "val6" } },
				...
				{ champ4 : "val4", champ5 : "do_10", DataObject : { champ6 : "val6" } },
			] },
			...
			{ champ3 : "Pref_1000", 
			MetaAip : [
				{ champ4 : "val3", champ5 : "do_1", DataObject : { champ6 : "val6" } },
				{ champ4 : "val4", champ5 : "do_2", DataObject : { champ6 : "val6" } },
				...
				{ champ4 : "val4", champ5 : "do_10", DataObject : { champ6 : "val6" } },
			] }
		] },
		{ champ1 : "valeur", champ2 : "val1",
		MetaAip : [
			{ champ3 : "Pref_1001", 
			MetaAip : [
				{ champ4 : "val3", champ5 : "do_1", DataObject : { champ6 : "val6" } },
				{ champ4 : "val4", champ5 : "do_2", DataObject : { champ6 : "val6" } },
				{ champ4 : "val4", champ5 : "do_3", DataObject : { champ6 : "val6" } },
				...
				{ champ4 : "val4", champ5 : "do_10", DataObject : { champ6 : "val6" } },
			] },
			{ champ3 : "Pref_1002", 
			MetaAip : [
				{ champ4 : "val3", champ5 : "do_1", DataObject : { champ6 : "val6" } },
				{ champ4 : "val4", champ5 : "do_2", DataObject : { champ6 : "val6" } },
				...
				{ champ4 : "val4", champ5 : "do_10", DataObject : { champ6 : "val6" } },
			] },
			...
			{ champ3 : "Pref_2000", 
			MetaAip : [
				{ champ4 : "val3", champ5 : "do_1", DataObject : { champ6 : "val6" } },
				{ champ4 : "val4", champ5 : "do_2", DataObject : { champ6 : "val6" } },
				...
				{ champ4 : "val4", champ5 : "do_10", DataObject : { champ6 : "val6" } },
			] }
		] },
		...
	]
}
